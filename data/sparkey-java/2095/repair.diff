diff --git a/src/main/java/com/spotify/sparkey/LogWriter.java b/src/main/java/com/spotify/sparkey/LogWriter.java
index 71e64be..cf6c669 100644
--- a/src/main/java/com/spotify/sparkey/LogWriter.java
+++ b/src/main/java/com/spotify/sparkey/LogWriter.java
@@ -14,6 +14,15 @@
  * the License.
  */
 package com.spotify.sparkey;
+import java.io.IOException;
+import java.io.FileNotFoundException;
+import java.io.FileDescriptor;
+import java.io.FileOutputStream;
+import java.io.File;
+import java.io.OutputStream;
+import java.io.InputStream;
+import java.io.RandomAccessFile;
+import java.io.BufferedOutputStream;
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;
@@ -46,12 +55,12 @@ final class LogWriter {
 
   private static BlockOutput setup(LogHeader header, File file) throws IOException {
     truncate(file, header.getDataEnd());
-    FileOutputStream fileOutputStream = new FileOutputStream(file, true);
-    Sparkey.incrOpenFiles();
-    FileDescriptor fd = fileOutputStream.getFD();
-    OutputStream stream = new BufferedOutputStream(fileOutputStream, 1024 * 1024);
-    return header.getCompressionTypeBackend().createBlockOutput(fd, stream, header.getCompressionBlockSize(),
-            header.getMaxEntriesPerBlock());
+    try (FileOutputStream fileOutputStream = new FileOutputStream(file, true)) {
+      Sparkey.incrOpenFiles();
+      FileDescriptor fd = fileOutputStream.getFD();
+      OutputStream stream = new BufferedOutputStream(fileOutputStream, 1024 * 1024);
+      return header.getCompressionTypeBackend().createBlockOutput(fd, stream, header.getCompressionBlockSize(), header.getMaxEntriesPerBlock());
+    }
   }
 
   private static void truncate(File file, long size) throws IOException {
diff --git a/src/test/java/com/spotify/sparkey/CompressedOutputStreamTest.java b/src/test/java/com/spotify/sparkey/CompressedOutputStreamTest.java
index fb84d79..1b11be1 100644
--- a/src/test/java/com/spotify/sparkey/CompressedOutputStreamTest.java
+++ b/src/test/java/com/spotify/sparkey/CompressedOutputStreamTest.java
@@ -1,4 +1,7 @@
 package com.spotify.sparkey;
+import java.io.IOException;
+import java.io.FileOutputStream;
+import java.io.File;
 
 import org.junit.Test;
 
@@ -13,13 +16,12 @@ public class CompressedOutputStreamTest {
         for (CompressorType compressor : CompressorType.values()) {
             File testFile = File.createTempFile("sparkey-test", "");
             testFile.deleteOnExit();
-            FileOutputStream fos = new FileOutputStream(testFile);
-
-            byte[] buf = new byte[1000 * 1000];
-            CompressedOutputStream os = new CompressedOutputStream(compressor, 10, fos, fos.getFD());
-            os.write(buf);
-
-            testFile.delete();
+            try (FileOutputStream fos = new FileOutputStream(testFile)) {
+                byte[] buf = new byte[1000 * 1000];
+                CompressedOutputStream os = new CompressedOutputStream(compressor, 10, fos, fos.getFD());
+                os.write(buf);
+                testFile.delete();
+            }
         }
     }
 }
diff --git a/src/test/java/com/spotify/sparkey/IndexHashTest.java b/src/test/java/com/spotify/sparkey/IndexHashTest.java
index e67ef45..951fd45 100644
--- a/src/test/java/com/spotify/sparkey/IndexHashTest.java
+++ b/src/test/java/com/spotify/sparkey/IndexHashTest.java
@@ -49,8 +49,9 @@ public class IndexHashTest extends BaseSystemTest {
   }
 
   private void corruptFile(File indexFile) throws IOException {
-    RandomAccessFile randomAccessFile = new RandomAccessFile(indexFile, "rw");
-    randomAccessFile.setLength(randomAccessFile.length() - 100);
-    randomAccessFile.close();
+    try (RandomAccessFile randomAccessFile = new RandomAccessFile(indexFile, "rw")) {
+      randomAccessFile.setLength(randomAccessFile.length() - 100);
+      randomAccessFile.close();
+    }
   }
 }
