diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java
index fa4f7b49..f8f8f363 100755
--- a/.mvn/wrapper/MavenWrapperDownloader.java
+++ b/.mvn/wrapper/MavenWrapperDownloader.java
@@ -1,3 +1,10 @@
+import java.io.IOException;
+import java.nio.channels.ReadableByteChannel;
+import java.io.FileOutputStream;
+import java.net.URL;
+import java.io.File;
+import java.io.FileInputStream;
+import java.nio.channels.Channels;
 /*
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
@@ -101,10 +108,11 @@ public class MavenWrapperDownloader {
         URL website = new URL(urlString);
         ReadableByteChannel rbc;
         rbc = Channels.newChannel(website.openStream());
-        FileOutputStream fos = new FileOutputStream(destination);
-        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
-        fos.close();
-        rbc.close();
+        try (FileOutputStream fos = new FileOutputStream(destination)) {
+            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
+            fos.close();
+            rbc.close();
+        }
     }
 
 }
diff --git a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
index 23847714..e57de4db 100644
--- a/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
+++ b/boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
@@ -528,42 +528,37 @@ public class Bootstrap {
         if (bootstrap.isAttachOnly()) {
             System.exit(0);
         }
-
-        // start java telnet client
+        try (// start java telnet client
         // find arthas-client.jar
-        URLClassLoader classLoader = new URLClassLoader(
-                        new URL[] { new File(arthasHomeDir, "arthas-client.jar").toURI().toURL() });
-        Class<?> telnetConsoleClas = classLoader.loadClass("com.taobao.arthas.client.TelnetConsole");
-        Method mainMethod = telnetConsoleClas.getMethod("main", String[].class);
-        List<String> telnetArgs = new ArrayList<String>();
-
-        if (bootstrap.getCommand() != null) {
-            telnetArgs.add("-c");
-            telnetArgs.add(bootstrap.getCommand());
-        }
-        if (bootstrap.getBatchFile() != null) {
-            telnetArgs.add("-f");
-            telnetArgs.add(bootstrap.getBatchFile());
-        }
-        if (bootstrap.getHeight() != null) {
-            telnetArgs.add("--height");
-            telnetArgs.add("" + bootstrap.getHeight());
-        }
-        if (bootstrap.getWidth() != null) {
-            telnetArgs.add("--width");
-            telnetArgs.add("" + bootstrap.getWidth());
+        URLClassLoader classLoader = new URLClassLoader(new URL[]{ new File(arthasHomeDir, "arthas-client.jar").toURI().toURL() })) {
+            Class<?> telnetConsoleClas = classLoader.loadClass("com.taobao.arthas.client.TelnetConsole");
+            Method mainMethod = telnetConsoleClas.getMethod("main", String[].class);
+            List<String> telnetArgs = new ArrayList<String>();
+            if (bootstrap.getCommand() != null) {
+                telnetArgs.add("-c");
+                telnetArgs.add(bootstrap.getCommand());
+            }
+            if (bootstrap.getBatchFile() != null) {
+                telnetArgs.add("-f");
+                telnetArgs.add(bootstrap.getBatchFile());
+            }
+            if (bootstrap.getHeight() != null) {
+                telnetArgs.add("--height");
+                telnetArgs.add("" + bootstrap.getHeight());
+            }
+            if (bootstrap.getWidth() != null) {
+                telnetArgs.add("--width");
+                telnetArgs.add("" + bootstrap.getWidth());
+            }
+            // telnet port ,ip
+            telnetArgs.add(bootstrap.getTargetIpOrDefault());
+            telnetArgs.add("" + bootstrap.getTelnetPortOrDefault());
+            AnsiLog.info("arthas-client connect {} {}", bootstrap.getTargetIpOrDefault(), bootstrap.getTelnetPortOrDefault());
+            AnsiLog.debug("Start arthas-client.jar args: " + telnetArgs);
+            // fix https://github.com/alibaba/arthas/issues/833
+            Thread.currentThread().setContextClassLoader(classLoader);
+            mainMethod.invoke(null, new Object[]{ telnetArgs.toArray(new String[0]) });
         }
-
-        // telnet port ,ip
-        telnetArgs.add(bootstrap.getTargetIpOrDefault());
-        telnetArgs.add("" + bootstrap.getTelnetPortOrDefault());
-
-        AnsiLog.info("arthas-client connect {} {}", bootstrap.getTargetIpOrDefault(), bootstrap.getTelnetPortOrDefault());
-        AnsiLog.debug("Start arthas-client.jar args: " + telnetArgs);
-
-        // fix https://github.com/alibaba/arthas/issues/833
-        Thread.currentThread().setContextClassLoader(classLoader);
-        mainMethod.invoke(null, new Object[] { telnetArgs.toArray(new String[0]) });
     }
 
     private static void checkTelnetPortPid(Bootstrap bootstrap, long telnetPortPid, long targetPid) {
@@ -588,37 +583,36 @@ public class Bootstrap {
         // telnet port ,ip
         telnetArgs.add("127.0.0.1");
         telnetArgs.add("" + telnetPort);
-
-        try {
+        try (Scanner scanner = new Scanner(output)) {
             ByteArrayOutputStream out = new ByteArrayOutputStream(1024);
             String error = null;
             int status = ProcessUtils.startArthasClient(arthasHomeDir, telnetArgs, out);
             if (status == STATUS_EXEC_TIMEOUT) {
                 error = "detection timeout";
-            } else if (status == STATUS_EXEC_ERROR) {
-                error = "detection error";
-                AnsiLog.error("process status: {}", status);
-                AnsiLog.error("process output: {}", out.toString());
-            } else {
-                // ignore connect error
-            }
+            } else
+                if (status == STATUS_EXEC_ERROR) {
+                    error = "detection error";
+                    AnsiLog.error("process status: {}", status);
+                    AnsiLog.error("process output: {}", out.toString());
+                } else {
+                    // ignore connect error
+                }
+
             if (error != null) {
                 AnsiLog.error("The telnet port {} is used, but process {}, you will connect to an unexpected process.", telnetPort, error);
                 AnsiLog.error("Try to use a different telnet port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port -1");
                 System.exit(1);
             }
-
-            //parse output, find java pid
+            // parse output, find java pid
             String output = out.toString("UTF-8");
             String javaPidLine = null;
-            Scanner scanner = new Scanner(output);
             while (scanner.hasNextLine()) {
                 String line = scanner.nextLine();
                 if (line.contains("JAVA_PID")) {
                     javaPidLine = line;
                     break;
                 }
-            }
+            } 
             if (javaPidLine != null) {
                 // JAVA_PID    10473
                 try {
diff --git a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java
index 49d18493..e6897ce5 100644
--- a/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java
+++ b/boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java
@@ -102,22 +102,19 @@ public class ProcessUtils {
             // get the first process id
             return processMap.keySet().iterator().next();
         }
-
-        int choice = new Scanner(line).nextInt();
-
-        if (choice <= 0 || choice > processMap.size()) {
-            return -1;
-        }
-
-        Iterator<Long> idIter = processMap.keySet().iterator();
-        for (int i = 1; i <= choice; ++i) {
-            if (i == choice) {
-                return idIter.next();
+        try (int choice = new Scanner(line).nextInt()) {
+            if (choice <= 0 || choice > processMap.size()) {
+                return -1;
+            }
+            Iterator<Long> idIter = processMap.keySet().iterator();
+            for (int i = 1; i <= choice; ++i) {
+                if (i == choice) {
+                    return idIter.next();
+                }
+                idIter.next();
             }
-            idIter.next();
+            return -1;
         }
-
-        return -1;
     }
 
     private static Map<Long, String> listProcessByJps(boolean v) {
@@ -309,48 +306,45 @@ public class ProcessUtils {
     }
 
     public static int startArthasClient(String arthasHomeDir, List<String> telnetArgs, OutputStream out) throws Throwable {
-        // start java telnet client
+        try (// start java telnet client
         // find arthas-client.jar
-        URLClassLoader classLoader = new URLClassLoader(
-                new URL[]{new File(arthasHomeDir, "arthas-client.jar").toURI().toURL()});
-        Class<?> telnetConsoleClas = classLoader.loadClass("com.taobao.arthas.client.TelnetConsole");
-        Method processMethod = telnetConsoleClas.getMethod("process", String[].class);
-
-        //redirect System.out/System.err
-        PrintStream originSysOut = System.out;
-        PrintStream originSysErr = System.err;
-        PrintStream newOut = new PrintStream(out);
-        PrintStream newErr = new PrintStream(out);
-
-        // call TelnetConsole.process()
-        // fix https://github.com/alibaba/arthas/issues/833
-        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
-        try {
-            System.setOut(newOut);
-            System.setErr(newErr);
-            Thread.currentThread().setContextClassLoader(classLoader);
-            return (Integer) processMethod.invoke(null, new Object[]{telnetArgs.toArray(new String[0])});
-        } catch (Throwable e) {
-            //java.lang.reflect.InvocationTargetException : java.net.ConnectException
-            e = e.getCause();
-            if (e instanceof IOException || e instanceof InterruptedException) {
-                // ignore connection error and interrupted error
-                return STATUS_ERROR;
-            } else {
-                // process error
-                AnsiLog.error("process error: {}", e.toString());
-                AnsiLog.error(e);
-                return STATUS_EXEC_ERROR;
+        URLClassLoader classLoader = new URLClassLoader(new URL[]{ new File(arthasHomeDir, "arthas-client.jar").toURI().toURL() })) {
+            Class<?> telnetConsoleClas = classLoader.loadClass("com.taobao.arthas.client.TelnetConsole");
+            Method processMethod = telnetConsoleClas.getMethod("process", String[].class);
+            // redirect System.out/System.err
+            PrintStream originSysOut = System.out;
+            PrintStream originSysErr = System.err;
+            PrintStream newOut = new PrintStream(out);
+            PrintStream newErr = new PrintStream(out);
+            // call TelnetConsole.process()
+            // fix https://github.com/alibaba/arthas/issues/833
+            ClassLoader tccl = Thread.currentThread().getContextClassLoader();
+            try {
+                System.setOut(newOut);
+                System.setErr(newErr);
+                Thread.currentThread().setContextClassLoader(classLoader);
+                return ((Integer) (processMethod.invoke(null, new Object[]{ telnetArgs.toArray(new String[0]) })));
+            } catch (Throwable e) {
+                // java.lang.reflect.InvocationTargetException : java.net.ConnectException
+                e = e.getCause();
+                if (e instanceof IOException || e instanceof InterruptedException) {
+                    // ignore connection error and interrupted error
+                    return STATUS_ERROR;
+                } else {
+                    // process error
+                    AnsiLog.error("process error: {}", e.toString());
+                    AnsiLog.error(e);
+                    return STATUS_EXEC_ERROR;
+                }
+            } finally {
+                Thread.currentThread().setContextClassLoader(tccl);
+                // reset System.out/System.err
+                System.setOut(originSysOut);
+                System.setErr(originSysErr);
+                // flush output
+                newOut.flush();
+                newErr.flush();
             }
-        } finally {
-            Thread.currentThread().setContextClassLoader(tccl);
-
-            //reset System.out/System.err
-            System.setOut(originSysOut);
-            System.setErr(originSysErr);
-            //flush output
-            newOut.flush();
-            newErr.flush();
         }
     }
 
diff --git a/client/src/main/java/org/apache/commons/net/DefaultSocketFactory.java b/client/src/main/java/org/apache/commons/net/DefaultSocketFactory.java
index 2f0d6583..b6b2178f 100644
--- a/client/src/main/java/org/apache/commons/net/DefaultSocketFactory.java
+++ b/client/src/main/java/org/apache/commons/net/DefaultSocketFactory.java
@@ -96,9 +96,10 @@ public class DefaultSocketFactory extends SocketFactory
     {
         if (connProxy != null)
         {
-            Socket s = new Socket(connProxy);
-            s.connect(new InetSocketAddress(host, port));
-            return s;
+            try (Socket s = new Socket(connProxy)) {
+                s.connect(new InetSocketAddress(host, port));
+                return s;
+            }
         }
         return new Socket(host, port);
     }
@@ -117,9 +118,10 @@ public class DefaultSocketFactory extends SocketFactory
     {
         if (connProxy != null)
         {
-            Socket s = new Socket(connProxy);
-            s.connect(new InetSocketAddress(address, port));
-            return s;
+            try (Socket s = new Socket(connProxy)) {
+                s.connect(new InetSocketAddress(address, port));
+                return s;
+            }
         }
         return new Socket(address, port);
     }
@@ -143,10 +145,11 @@ public class DefaultSocketFactory extends SocketFactory
     {
         if (connProxy != null)
         {
-            Socket s = new Socket(connProxy);
-            s.bind(new InetSocketAddress(localAddr, localPort));
-            s.connect(new InetSocketAddress(host, port));
-            return s;
+            try (Socket s = new Socket(connProxy)) {
+                s.bind(new InetSocketAddress(localAddr, localPort));
+                s.connect(new InetSocketAddress(host, port));
+                return s;
+            }
         }
         return new Socket(host, port, localAddr, localPort);
     }
@@ -169,10 +172,11 @@ public class DefaultSocketFactory extends SocketFactory
     {
         if (connProxy != null)
         {
-            Socket s = new Socket(connProxy);
-            s.bind(new InetSocketAddress(localAddr, localPort));
-            s.connect(new InetSocketAddress(address, port));
-            return s;
+            try (Socket s = new Socket(connProxy)) {
+                s.bind(new InetSocketAddress(localAddr, localPort));
+                s.connect(new InetSocketAddress(address, port));
+                return s;
+            }
         }
         return new Socket(address, port, localAddr, localPort);
     }
diff --git a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/Helper.java b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/Helper.java
index c7432204..b3271717 100644
--- a/core/src/main/java/com/taobao/arthas/core/shell/term/impl/Helper.java
+++ b/core/src/main/java/com/taobao/arthas/core/shell/term/impl/Helper.java
@@ -22,11 +22,8 @@ public class Helper {
     }
 
     public static InputStream loadInputRcFile() {
-        InputStream inputrc;
-        // step 1: load custom keymap file
-        try {
+        try (InputStream inputrc = new FileInputStream(customInputrc)) {
             String customInputrc = System.getProperty("user.home") + "/.arthas/conf/inputrc";
-            inputrc = new FileInputStream(customInputrc);
             logger.info("Loaded custom keymap file from " + customInputrc);
             return inputrc;
         } catch (Throwable e) {
diff --git a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java
index c2aba4ad..5aa06edd 100644
--- a/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java
+++ b/core/src/main/java/com/taobao/arthas/core/util/FileUtils.java
@@ -1,4 +1,13 @@
 package com.taobao.arthas.core.util;
+import java.io.Reader;
+import java.io.IOException;
+import java.io.FileOutputStream;
+import java.io.File;
+import java.io.OutputStream;
+import java.io.FileInputStream;
+import java.io.InputStreamReader;
+import java.io.BufferedReader;
+import java.io.BufferedOutputStream;
 
 /**
  * Copied from {@link org.apache.commons.io.FileUtils}
@@ -199,17 +208,14 @@ public class FileUtils {
 
     public static String readFileToString(File file, Charset encoding) throws IOException {
         FileInputStream stream = new FileInputStream(file);
-        try {
-            Reader reader = new BufferedReader(new InputStreamReader(stream, encoding));
+        try (Reader reader = new BufferedReader(new InputStreamReader(stream, encoding))) {
             StringBuilder builder = new StringBuilder();
             char[] buffer = new char[8192];
             int read;
             while ((read = reader.read(buffer, 0, buffer.length)) > 0) {
                 builder.append(buffer, 0, read);
-            }
+            } 
             return builder.toString();
-        } finally {
-            stream.close();
         }
     }
 
diff --git a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java
index a3e9a63d..95d11851 100644
--- a/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java
+++ b/core/src/main/java/com/taobao/arthas/core/util/NetUtils.java
@@ -125,14 +125,12 @@ public class NetUtils {
      */
     public static Response requestViaSocket(String path) {
         BufferedReader br = null;
-        try {
-            Socket s = new Socket(QOS_HOST, QOS_PORT);
+        try (Socket s = new Socket(QOS_HOST, QOS_PORT)) {
             PrintWriter pw = new PrintWriter(s.getOutputStream());
             pw.println("GET " + path + " HTTP/1.1");
             pw.println("Host: " + QOS_HOST + ":" + QOS_PORT);
             pw.println("");
             pw.flush();
-
             br = new BufferedReader(new InputStreamReader(s.getInputStream()));
             StringBuffer sb = new StringBuffer();
             String line = null;
@@ -144,19 +142,11 @@ public class NetUtils {
                 if (line.equals(QOS_RESPONSE_START_LINE)) {
                     start = true;
                 }
-            }
+            } 
             String result = sb.toString().trim();
             return new Response(result);
         } catch (Exception e) {
             return new Response(e.getMessage(), false);
-        } finally {
-            if (br != null) {
-                try {
-                    br.close();
-                } catch (IOException e) {
-                    // ignore
-                }
-            }
         }
     }
 
