diff --git a/modules/app/src/main/java/org/locationtech/jtstest/util/FileUtil.java b/modules/app/src/main/java/org/locationtech/jtstest/util/FileUtil.java
index 4e39c311..c115ca4d 100644
--- a/modules/app/src/main/java/org/locationtech/jtstest/util/FileUtil.java
+++ b/modules/app/src/main/java/org/locationtech/jtstest/util/FileUtil.java
@@ -10,6 +10,18 @@
  * http://www.eclipse.org/org/documents/edl-v10.php.
  */
 package org.locationtech.jtstest.util;
+import java.util.Vector;
+import java.io.IOException;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.File;
+import java.util.List;
+import java.io.FileInputStream;
+import java.io.InputStreamReader;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.RandomAccessFile;
 
 import java.io.*;
 import java.util.*;
@@ -62,13 +74,14 @@ public class FileUtil
     public static List getContents(String textFileName) throws FileNotFoundException, IOException {
         List contents = new Vector();
         FileReader fileReader = new FileReader(textFileName);
-        BufferedReader bufferedReader = new BufferedReader(fileReader);
-        String line = bufferedReader.readLine();
-        while (line != null) {
-            contents.add(line);
-            line = bufferedReader.readLine();
+        try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {
+            String line = bufferedReader.readLine();
+            while (line != null) {
+                contents.add(line);
+                line = bufferedReader.readLine();
+            } 
+            return contents;
         }
-        return contents;
     }
  
     public static String readText(String filename) 
@@ -90,12 +103,13 @@ public class FileUtil
 		StringBuffer strb = new StringBuffer("");
 
 		FileInputStream fin = new FileInputStream(file);
-		BufferedReader br = new BufferedReader(new InputStreamReader(fin));
-		while ((thisLine = br.readLine()) != null) {
-			strb.append(thisLine + "\r\n");
-		}
-		String result = strb.toString();
-		return result;
+        try (BufferedReader br = new BufferedReader(new InputStreamReader(fin))) {
+            while ((thisLine = br.readLine()) != null) {
+                strb.append(thisLine + "\r\n");
+            } 
+            String result = strb.toString();
+            return result;
+        }
 	}
 
     /**
@@ -103,11 +117,12 @@ public class FileUtil
 		 */
     public static void setContents(String textFileName, String contents) throws IOException {
         FileWriter fileWriter = new FileWriter(textFileName, false);
-        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
-        bufferedWriter.write(contents);
-        bufferedWriter.flush();
-        bufferedWriter.close();
-        fileWriter.close();
+        try (BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)) {
+            bufferedWriter.write(contents);
+            bufferedWriter.flush();
+            bufferedWriter.close();
+            fileWriter.close();
+        }
     }
 
     /**
@@ -115,19 +130,21 @@ public class FileUtil
      * Posted by Mark Thornton <mthorn@cix.compulink.co.uk> on Usenet.
      */
     public static void copyFile(File source, File destination) throws IOException {
-        RandomAccessFile out = new RandomAccessFile(destination, "rw");
-        //Tell the OS in advance how big the file will be. This may reduce fragmentation
-        out.setLength(source.length());
-        //copy the content
-        FileInputStream in = new FileInputStream(source);
-        byte[] buffer = new byte[16384];
-        while (true) {
-            int n = in.read(buffer);
-            if (n == -1)
-                break;
-            out.write(buffer, 0, n);
+        try (RandomAccessFile out = new RandomAccessFile(destination, "rw")) {
+            // Tell the OS in advance how big the file will be. This may reduce fragmentation
+            out.setLength(source.length());
+            // copy the content
+            FileInputStream in = new FileInputStream(source);
+            byte[] buffer = new byte[16384];
+            while (true) {
+                int n = in.read(buffer);
+                if (n == -1) {
+                    break;
+                }
+                out.write(buffer, 0, n);
+            } 
+            in.close();
+            out.close();
         }
-        in.close();
-        out.close();
     }
 }
diff --git a/modules/core/src/test/java/test/jts/geom/TestSerializable.java b/modules/core/src/test/java/test/jts/geom/TestSerializable.java
index e02ad750..7d87fc92 100644
--- a/modules/core/src/test/java/test/jts/geom/TestSerializable.java
+++ b/modules/core/src/test/java/test/jts/geom/TestSerializable.java
@@ -67,65 +67,44 @@ public class TestSerializable {
   }
   void writeData(List objList)
   {
-    File file;                           // simply a file name
-    FileOutputStream outStream;             // generic stream to the file
-    ObjectOutputStream objStream;           // stream for objects to the file
+    File file;           // stream for objects to the file
 
     file = new File(FILENAME);
-
-    try {
-      // setup a stream to a physical file on the filesystem
-      outStream = new FileOutputStream(file);
-
-      // attach a stream capable of writing objects to the stream that is
-      // connected to the file
-      objStream = new ObjectOutputStream(outStream);
-
+    try (// generic stream to the file
+    ObjectOutputStream objStream = new ObjectOutputStream(outStream)) {
       objStream.writeObject(objList);
-//      for (Iterator i = objList.iterator(); i.hasNext(); )
-//      {
-//        objStream.writeObject(i.next());
-//      }
+      // for (Iterator i = objList.iterator(); i.hasNext(); )
+      // {
+      // objStream.writeObject(i.next());
+      // }
       objStream.close();
-
-    } catch(IOException e) {
+    } catch (IOException e) {
       System.err.println("Things not going as planned.");
       e.printStackTrace();
-    }   // catch
+    }
   }
   void readData(List objList)
   {
-    File file;                           // simply a file name
-    FileInputStream stream;             // generic stream to the file
-    ObjectInputStream objStream;           // stream for objects to the file
+    File file;           // stream for objects to the file
 
     file = new File(FILENAME);
-
-    try {
-      // setup a stream to a physical file on the filesystem
-      stream = new FileInputStream(file);
-
-      // attach a stream capable of writing objects to the stream that is
-      // connected to the file
-      objStream = new ObjectInputStream(stream);
-
+    try (// generic stream to the file
+    ObjectInputStream objStream = new ObjectInputStream(stream)) {
       int count = 0;
       Object obj = objStream.readObject();
-      List inputList = (List) obj;
-      for (Iterator i = inputList.iterator(); i.hasNext(); ) {
+      List inputList = ((List) (obj));
+      for (Iterator i = inputList.iterator(); i.hasNext();) {
         compare(objList.get(count++), i.next());
       }
-
-//      while (objStream.available() > 0) {
-//        Object obj = objStream.readObject();
-//        compare(objList.get(count++), obj);
-//      }
+      // while (objStream.available() > 0) {
+      // Object obj = objStream.readObject();
+      // compare(objList.get(count++), obj);
+      // }
       objStream.close();
-
-    } catch(Exception e) {
+    } catch (Exception e) {
       System.err.println("Things not going as planned.");
       e.printStackTrace();
-    }   // catch
+    }
   }
 
   boolean compare(Object o1, Object o2)
diff --git a/modules/tests/src/main/java/org/locationtech/jtstest/testrunner/TestReader.java b/modules/tests/src/main/java/org/locationtech/jtstest/testrunner/TestReader.java
index b0147691..bfb314dc 100644
--- a/modules/tests/src/main/java/org/locationtech/jtstest/testrunner/TestReader.java
+++ b/modules/tests/src/main/java/org/locationtech/jtstest/testrunner/TestReader.java
@@ -12,6 +12,22 @@
  * http://www.eclipse.org/org/documents/edl-v10.php.
  */
 package org.locationtech.jtstest.testrunner;
+import DataConversionException;
+import java.util.Vector;
+import java.io.IOException;
+import java.io.FileNotFoundException;
+import java.util.Collections;
+import java.io.FileReader;
+import SAXBuilder;
+import Element;
+import java.io.File;
+import java.util.List;
+import java.util.ArrayList;
+import java.io.FileInputStream;
+import Document;
+import java.io.BufferedReader;
+import java.util.Iterator;
+import Attribute;
 
 
 import java.io.*;
@@ -587,13 +603,14 @@ public class TestReader
     public static List getContents(String textFileName) throws FileNotFoundException, IOException {
         List contents = new Vector();
         FileReader fileReader = new FileReader(textFileName);
-        BufferedReader bufferedReader = new BufferedReader(fileReader);
-        String line = bufferedReader.readLine();
-        while (line != null) {
-            contents.add(line);
-            line = bufferedReader.readLine();
+        try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {
+            String line = bufferedReader.readLine();
+            while (line != null) {
+                contents.add(line);
+                line = bufferedReader.readLine();
+            } 
+            return contents;
         }
-        return contents;
     }
 
 }
