diff --git a/wdtk-examples/src/main/java/org/wikidata/wdtk/examples/RdfSerializationExample.java b/wdtk-examples/src/main/java/org/wikidata/wdtk/examples/RdfSerializationExample.java
index 4e0a038f..e93e4392 100644
--- a/wdtk-examples/src/main/java/org/wikidata/wdtk/examples/RdfSerializationExample.java
+++ b/wdtk-examples/src/main/java/org/wikidata/wdtk/examples/RdfSerializationExample.java
@@ -1,4 +1,11 @@
 package org.wikidata.wdtk.examples;
+import java.io.PipedInputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.FilterOutputStream;
+import java.io.PipedOutputStream;
+import java.io.Closeable;
+import java.io.BufferedOutputStream;
 
 /*
  * #%L
@@ -121,22 +128,23 @@ public class RdfSerializationExample {
 	public static OutputStream asynchronousOutputStream(
 			final OutputStream outputStream) throws IOException {
 		final int SIZE = 1024 * 1024 * 10;
-		final PipedOutputStream pos = new PipedOutputStream();
-		final PipedInputStream pis = new PipedInputStream(pos, SIZE);
-		final Thread worker = new Thread(() -> {
-			try {
-				byte[] bytes = new byte[SIZE];
-				for (int len; (len = pis.read(bytes)) > 0;) {
-					outputStream.write(bytes, 0, len);
+		try (final PipedOutputStream pos = new PipedOutputStream()) {
+			final PipedInputStream pis = new PipedInputStream(pos, SIZE);
+			final Thread worker = new Thread(() -> {
+				try {
+					byte[] bytes = new byte[SIZE];
+					for (int len; (len = pis.read(bytes)) > 0;) {
+						outputStream.write(bytes, 0, len);
+					}
+				} catch (IOException ioException) {
+					ioException.printStackTrace();
+				} finally {
+					close(pis);
+					close(outputStream);
 				}
-			} catch (IOException ioException) {
-				ioException.printStackTrace();
-			} finally {
-				close(pis);
-				close(outputStream);
-			}
-		}, "async-output-stream");
-		return new SyncCloseOutputStream(pos, worker);
+			}, "async-output-stream");
+			return new SyncCloseOutputStream(pos, worker);
+		}
 	}
 
 
diff --git a/wdtk-testing/src/main/java/org/wikidata/wdtk/testing/MockStringContentFactory.java b/wdtk-testing/src/main/java/org/wikidata/wdtk/testing/MockStringContentFactory.java
index a81f249f..43fc42f0 100644
--- a/wdtk-testing/src/main/java/org/wikidata/wdtk/testing/MockStringContentFactory.java
+++ b/wdtk-testing/src/main/java/org/wikidata/wdtk/testing/MockStringContentFactory.java
@@ -1,4 +1,7 @@
 package org.wikidata.wdtk.testing;
+import static org.wikidata.wdtk.util.CompressionType.BZ2;
+import static org.wikidata.wdtk.util.CompressionType.GZIP;
+import static org.wikidata.wdtk.util.CompressionType.NONE;
 
 /*
  * #%L
@@ -167,11 +170,8 @@ public class MockStringContentFactory {
 		case BZ2:
 		case GZIP:
 			ByteArrayOutputStream out = new ByteArrayOutputStream();
-			OutputStreamWriter ow;
 			if (compressionType == CompressionType.GZIP) {
-				ow = new OutputStreamWriter(
-						new GzipCompressorOutputStream(out),
-						StandardCharsets.UTF_8);
+						try (OutputStreamWriter ow = new OutputStreamWriter(new GzipCompressorOutputStream(out), StandardCharsets.UTF_8)) 
 			} else {
 				ow = new OutputStreamWriter(
 						new BZip2CompressorOutputStream(out),
diff --git a/wdtk-util/src/test/java/org/wikidata/wdtk/util/DirectoryManagerTest.java b/wdtk-util/src/test/java/org/wikidata/wdtk/util/DirectoryManagerTest.java
index db753b15..ed5eed46 100644
--- a/wdtk-util/src/test/java/org/wikidata/wdtk/util/DirectoryManagerTest.java
+++ b/wdtk-util/src/test/java/org/wikidata/wdtk/util/DirectoryManagerTest.java
@@ -100,30 +100,24 @@ public class DirectoryManagerTest {
 	@Test
 	public void getCompressionInputStreamGzip() throws IOException {
 		ByteArrayOutputStream out = new ByteArrayOutputStream();
-		OutputStreamWriter ow = new OutputStreamWriter(
-				new GzipCompressorOutputStream(out), StandardCharsets.UTF_8);
-		ow.write("Test data");
-		ow.close();
-
-		ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
-		InputStream cin = dm.getCompressorInputStream(in, CompressionType.GZIP);
-
-		assertEquals("Test data",
-				new BufferedReader(new InputStreamReader(cin)).readLine());
+		try (OutputStreamWriter ow = new OutputStreamWriter(new GzipCompressorOutputStream(out), StandardCharsets.UTF_8)) {
+			ow.write("Test data");
+			ow.close();
+			ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
+			InputStream cin = dm.getCompressorInputStream(in, CompressionType.GZIP);
+			assertEquals("Test data", new BufferedReader(new InputStreamReader(cin)).readLine());
+		}
 	}
 
 	@Test
 	public void getCompressionInputStreamBz2() throws IOException {
 		ByteArrayOutputStream out = new ByteArrayOutputStream();
-		OutputStreamWriter ow = new OutputStreamWriter(
-				new BZip2CompressorOutputStream(out), StandardCharsets.UTF_8);
-		ow.write("Test data");
-		ow.close();
-
-		ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
-		InputStream cin = dm.getCompressorInputStream(in, CompressionType.BZ2);
-
-		assertEquals("Test data",
-				new BufferedReader(new InputStreamReader(cin)).readLine());
+		try (OutputStreamWriter ow = new OutputStreamWriter(new BZip2CompressorOutputStream(out), StandardCharsets.UTF_8)) {
+			ow.write("Test data");
+			ow.close();
+			ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
+			InputStream cin = dm.getCompressorInputStream(in, CompressionType.BZ2);
+			assertEquals("Test data", new BufferedReader(new InputStreamReader(cin)).readLine());
+		}
 	}
 }
