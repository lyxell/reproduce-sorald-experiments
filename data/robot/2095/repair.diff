diff --git a/robot-command/src/main/java/org/obolibrary/robot/CommandLineHelper.java b/robot-command/src/main/java/org/obolibrary/robot/CommandLineHelper.java
index 9281e599..c1f00c4f 100644
--- a/robot-command/src/main/java/org/obolibrary/robot/CommandLineHelper.java
+++ b/robot-command/src/main/java/org/obolibrary/robot/CommandLineHelper.java
@@ -1,4 +1,24 @@
 package org.obolibrary.robot;
+import java.util.HashMap;
+import java.util.HashSet;
+import OWLAxiom;
+import OWLOntology;
+import java.util.Vector;
+import java.util.StringTokenizer;
+import java.io.IOException;
+import java.io.FileFilter;
+import IRI;
+import java.util.Map;
+import java.util.Set;
+import java.io.File;
+import java.util.List;
+import Level;
+import java.util.ArrayList;
+import java.io.FileInputStream;
+import java.util.Properties;
+import OWLDocumentFormat;
+import java.io.InputStream;
+import java.util.Arrays;
 
 import com.github.jsonldjava.core.Context;
 import java.io.*;
@@ -867,8 +887,9 @@ public class CommandLineHelper {
         throw new IOExceptionWithCause(e);
       }
       File f = new File(uri);
-      InputStream is = new FileInputStream(f);
-      p.load(is);
+      try (InputStream is = new FileInputStream(f)) {
+        p.load(is);
+      }
     } else {
       // Brute-force to get properties file from JAR
       // This will be used any time `robot --version` is entered on command line
diff --git a/robot-command/src/main/java/org/obolibrary/robot/ValidateProfileCommand.java b/robot-command/src/main/java/org/obolibrary/robot/ValidateProfileCommand.java
index 0727067d..77679646 100644
--- a/robot-command/src/main/java/org/obolibrary/robot/ValidateProfileCommand.java
+++ b/robot-command/src/main/java/org/obolibrary/robot/ValidateProfileCommand.java
@@ -104,9 +104,10 @@ public class ValidateProfileCommand implements Command {
     OWLProfileReport report = owlProfile.checkOntology(ontology);
     File outputFile = CommandLineHelper.getOutputFile(line);
     if (outputFile != null) {
-      FileWriter writer = new FileWriter(outputFile);
-      writer.write(report.toString());
-      writer.close();
+        try (FileWriter writer = new FileWriter(outputFile)) {
+          writer.write(report.toString());
+          writer.close();
+        }
     } else {
       System.out.println(report.toString());
     }
diff --git a/robot-core/src/main/java/org/obolibrary/robot/IOHelper.java b/robot-core/src/main/java/org/obolibrary/robot/IOHelper.java
index a0c6c720..e3e129b5 100644
--- a/robot-core/src/main/java/org/obolibrary/robot/IOHelper.java
+++ b/robot-core/src/main/java/org/obolibrary/robot/IOHelper.java
@@ -1,4 +1,42 @@
 package org.obolibrary.robot;
+import java.util.HashMap;
+import java.util.HashSet;
+import OWLOntology;
+import java.io.Reader;
+import java.io.Writer;
+import java.io.IOException;
+import TurtleDocumentFormat;
+import OWLOntologyStorageException;
+import java.io.ByteArrayOutputStream;
+import java.io.FileNotFoundException;
+import OBODocumentFormat;
+import OWLDataFactory;
+import CSVWriter;
+import ManchesterSyntaxDocumentFormat;
+import RDFXMLDocumentFormat;
+import java.io.FileWriter;
+import java.io.FileOutputStream;
+import OWLOntologyCreationException;
+import IRI;
+import java.util.Map;
+import java.util.Set;
+import java.io.File;
+import java.util.List;
+import java.io.ByteArrayInputStream;
+import OWLXMLDocumentFormat;
+import java.util.zip.GZIPInputStream;
+import java.io.OutputStreamWriter;
+import java.util.zip.GZIPOutputStream;
+import FunctionalSyntaxDocumentFormat;
+import java.io.FileInputStream;
+import OWLDocumentFormat;
+import java.io.BufferedWriter;
+import OWLOntologyManager;
+import java.io.InputStream;
+import java.io.BufferedInputStream;
+import PrefixDocumentFormat;
+import OWLDatatype;
+import java.io.BufferedOutputStream;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -1193,9 +1231,10 @@ public class IOHelper {
    * @throws IOException on any error
    */
   public void saveContext(File file) throws IOException {
-    FileWriter writer = new FileWriter(file);
-    writer.write(getContextString());
-    writer.close();
+    try (FileWriter writer = new FileWriter(file)) {
+      writer.write(getContextString());
+      writer.close();
+    }
   }
 
   /**
@@ -1439,9 +1478,10 @@ public class IOHelper {
    * @throws IOException on any problem
    */
   private OWLOntology loadCompressedOntology(File gzipFile, String catalogPath) throws IOException {
-    FileInputStream fis = new FileInputStream(gzipFile);
-    GZIPInputStream gis = new GZIPInputStream(fis);
-    return loadOntology(gis, catalogPath);
+    try (FileInputStream fis = new FileInputStream(gzipFile)) {
+      GZIPInputStream gis = new GZIPInputStream(fis);
+      return loadOntology(gis, catalogPath);
+    }
   }
 
   /**
@@ -1456,11 +1496,8 @@ public class IOHelper {
   private OWLOntology loadCompressedOntology(URL url, String catalogPath) throws IOException {
     // Check for redirects
     url = followRedirects(url);
-
-    // Open an input stream
-    InputStream is;
-    try {
-      is = new BufferedInputStream(url.openStream(), 1024);
+    try (// Open an input stream
+    InputStream is = new BufferedInputStream(url.openStream(), 1024)) {
     } catch (FileNotFoundException e) {
       throw new IOException(String.format(invalidOntologyIRIError, url));
     }
diff --git a/robot-maven-plugin/src/main/java/org/obolibrary/robot/UpdateContextMojo.java b/robot-maven-plugin/src/main/java/org/obolibrary/robot/UpdateContextMojo.java
index d41883ad..fa958726 100644
--- a/robot-maven-plugin/src/main/java/org/obolibrary/robot/UpdateContextMojo.java
+++ b/robot-maven-plugin/src/main/java/org/obolibrary/robot/UpdateContextMojo.java
@@ -32,18 +32,15 @@ public class UpdateContextMojo extends AbstractMojo {
     }
     String contextPath = robot + "/robot-core/src/main/resources/obo_context.jsonld";
     File contextFile = new File(contextPath);
-
-    // Download current OBO Context
-    String oboContext = "";
-    try {
-      oboContext =
-          new Scanner(
-                  new URL(
-                          "https://raw.githubusercontent.com/OBOFoundry/OBOFoundry.github.io/master/registry/obo_context.jsonld")
-                      .openStream(),
-                  "UTF-8")
-              .useDelimiter("\\A")
-              .next();
+    try ( // Download current OBO Context
+    String oboContext =
+        new Scanner(
+                new URL(
+                        "https://raw.githubusercontent.com/OBOFoundry/OBOFoundry.github.io/master/registry/obo_context.jsonld")
+                    .openStream(),
+                "UTF-8")
+            .useDelimiter("\\A")
+            .next()) {
     } catch (IOException e) {
       getLog().error("Unable to download OBO Context!");
       e.printStackTrace();
