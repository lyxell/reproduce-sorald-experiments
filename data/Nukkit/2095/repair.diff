diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java
index c32394f14..19659ce2b 100644
--- a/.mvn/wrapper/MavenWrapperDownloader.java
+++ b/.mvn/wrapper/MavenWrapperDownloader.java
@@ -1,3 +1,12 @@
+import java.net.Authenticator;
+import java.io.IOException;
+import java.nio.channels.ReadableByteChannel;
+import java.io.FileOutputStream;
+import java.net.URL;
+import java.io.File;
+import java.net.PasswordAuthentication;
+import java.io.FileInputStream;
+import java.nio.channels.Channels;
 /*
  * Copyright 2007-present the original author or authors.
  *
@@ -108,10 +117,11 @@ public class MavenWrapperDownloader {
         URL website = new URL(urlString);
         ReadableByteChannel rbc;
         rbc = Channels.newChannel(website.openStream());
-        FileOutputStream fos = new FileOutputStream(destination);
-        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
-        fos.close();
-        rbc.close();
+        try (FileOutputStream fos = new FileOutputStream(destination)) {
+            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
+            fos.close();
+            rbc.close();
+        }
     }
 
 }
diff --git a/src/main/java/cn/nukkit/utils/Utils.java b/src/main/java/cn/nukkit/utils/Utils.java
index 377fa3db0..36d987466 100644
--- a/src/main/java/cn/nukkit/utils/Utils.java
+++ b/src/main/java/cn/nukkit/utils/Utils.java
@@ -1,4 +1,17 @@
 package cn.nukkit.utils;
+import java.io.Reader;
+import java.io.IOException;
+import java.io.ByteArrayOutputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.File;
+import java.io.ByteArrayInputStream;
+import java.io.StringWriter;
+import java.io.FileInputStream;
+import java.io.InputStreamReader;
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.PrintWriter;
 
 import java.io.*;
 import java.lang.management.ManagementFactory;
@@ -89,22 +102,15 @@ public class Utils {
         }
         FileInputStream fi = null;
         FileChannel in = null;
-        FileOutputStream fo = null;
         FileChannel out = null;
-        try {
+        try (FileOutputStream fo = new FileOutputStream(to)) {
             if (!to.exists()) {
                 to.createNewFile();
             }
             fi = new FileInputStream(from);
             in = fi.getChannel();
-            fo = new FileOutputStream(to);
             out = fo.getChannel();
             in.transferTo(0, in.size(), out);
-        } finally {
-            if (fi != null) fi.close();
-            if (in != null) in.close();
-            if (fo != null) fo.close();
-            if (out != null) out.close();
         }
     }
 
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 9c322a3c8..4f54451dc 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -22,6 +22,11 @@
  * THE SOFTWARE.
  */
 package co.aikar.timings;
+import java.io.IOException;
+import java.io.ByteArrayOutputStream;
+import java.io.FileWriter;
+import java.io.File;
+import java.io.InputStream;
 
 import cn.nukkit.Server;
 import cn.nukkit.command.CommandSender;
@@ -200,21 +205,17 @@ public class TimingsExport extends Thread {
         this.out.add("data", JsonUtil.mapToArray(this.history, TimingsHistory::export));
 
         String response = null;
-        try {
-            HttpURLConnection con = (HttpURLConnection) new URL("http://timings.aikar.co/post").openConnection();
+        try (FileWriter writer = new FileWriter(fileName)) {
+            HttpURLConnection con = ((HttpURLConnection) (new URL("http://timings.aikar.co/post").openConnection()));
             con.setDoOutput(true);
             con.setRequestProperty("User-Agent", "Nukkit/" + Server.getInstance().getName() + "/" + InetAddress.getLocalHost().getHostName());
             con.setRequestMethod("POST");
             con.setInstanceFollowRedirects(false);
-
             PGZIPOutputStream request = new PGZIPOutputStream(con.getOutputStream());
             request.setLevel(Deflater.BEST_COMPRESSION);
-
             request.write(new Gson().toJson(this.out).getBytes(StandardCharsets.UTF_8));
             request.close();
-
             response = getResponse(con);
-
             if (con.getResponseCode() != 302) {
                 this.sender.sendMessage(new TranslationContainer("nukkit.command.timings.uploadError", String.valueOf(con.getResponseCode()), con.getResponseMessage()));
                 if (response != null) {
@@ -222,26 +223,20 @@ public class TimingsExport extends Thread {
                 }
                 return;
             }
-
             String location = con.getHeaderField("Location");
             this.sender.sendMessage(new TranslationContainer("nukkit.command.timings.timingsLocation", location));
             if (!(this.sender instanceof ConsoleCommandSender)) {
                 Server.getInstance().getLogger().info(Server.getInstance().getLanguage().translateString("nukkit.command.timings.timingsLocation", location));
             }
-
             if (response != null && !response.isEmpty()) {
                 Server.getInstance().getLogger().info(Server.getInstance().getLanguage().translateString("nukkit.command.timings.timingsResponse", response));
             }
-
             File timingFolder = new File(Server.getInstance().getDataPath() + File.separator + "timings");
             timingFolder.mkdirs();
             String fileName = timingFolder + File.separator + new SimpleDateFormat("'timings-'yyyy-MM-dd-hh-mm'.txt'").format(new Date());
-
-            FileWriter writer = new FileWriter(fileName);
             writer.write(Server.getInstance().getLanguage().translateString("nukkit.command.timings.timingsLocation", location) + "\n\n");
             writer.write(new GsonBuilder().setPrettyPrinting().create().toJson(this.out));
             writer.close();
-
             Server.getInstance().getLogger().info(Server.getInstance().getLanguage().translateString("nukkit.command.timings.timingsWrite", fileName));
         } catch (IOException exception) {
             this.sender.sendMessage(TextFormat.RED + "" + new TranslationContainer("nukkit.command.timings.reportError"));
