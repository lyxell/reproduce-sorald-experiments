diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/LocalSetup.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/LocalSetup.java
index 722a6a6..65ded53 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/LocalSetup.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/LocalSetup.java
@@ -4,6 +4,15 @@
  */
 
 package at.redeye.FrameWork.base;
+import java.util.HashMap;
+import java.io.IOException;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.util.Set;
+import java.io.File;
+import java.util.List;
+import java.io.FileInputStream;
+import java.util.Properties;
 
 import at.redeye.FrameWork.base.bindtypes.DBStrukt;
 import at.redeye.FrameWork.base.prm.bindtypes.DBConfig;
@@ -67,20 +76,13 @@ public class LocalSetup extends Setup {
 
 	public boolean loadProps() {
 		props = new Properties();
-
-		try {
-			FileInputStream in = new FileInputStream(config_file);
+		try (FileInputStream in = new FileInputStream(config_file)) {
 			props.load(in);
 			in.close();
-
 		} catch (FileNotFoundException e) {
-
 			initial_run = true;
-
 			return true;
-
 		} catch (IOException ioe) {
-
 			System.err.println("Unhandled exception:");
 			ioe.printStackTrace();
 			return false;
@@ -90,20 +92,16 @@ public class LocalSetup extends Setup {
 	}
 
 	public boolean saveProps() {
-		try {
+		try (FileOutputStream out = new FileOutputStream(config_file)) {
 			Properties oldProps = new Properties();
-
-			try {
-				FileInputStream in = new FileInputStream(config_file);
+			try (FileInputStream in = new FileInputStream(config_file)) {
 				oldProps.load(in);
 				in.close();
 			} catch (FileNotFoundException ex) {
 				logger.error("File " + config_file + " existiert noch nicht.");
 			}
-
 			Set keys = oldProps.keySet();
-
-			for (String currKey : (Iterable<String>) keys) {
+			for (String currKey : ((Iterable<String>) (keys))) {
 				DBConfig c = LocalConfigDefinitions.get(currKey);
 				if (c != null) {
 					PrmActionEvent event = new PrmActionEvent();
@@ -114,13 +112,9 @@ public class LocalSetup extends Setup {
 					c.updateListeners(event);
 				}
 			}
-
-			FileOutputStream out = new FileOutputStream(config_file);
 			props.store(out, "nix");
 			out.close();
-
 		} catch (IOException ioe) {
-
 			System.err.println("Unhandled exception:");
 			ioe.printStackTrace();
 			return false;
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/proxy/ProxyVoleDLL.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/proxy/ProxyVoleDLL.java
index 36de81c..fc6650b 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/proxy/ProxyVoleDLL.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/proxy/ProxyVoleDLL.java
@@ -41,17 +41,17 @@ public class ProxyVoleDLL implements DLLExtractor
                 continue;
 
             File tempFile = new File( envdir + "/"  + lib );
-
-            FileOutputStream fout = new FileOutputStream(tempFile);
-            byte[] buffer = new byte[1024];
-            int read = 0;
-            while (read >= 0) {
-                fout.write(buffer, 0, read);
-                read = source.read(buffer);
+            try (FileOutputStream fout = new FileOutputStream(tempFile)) {
+                byte[] buffer = new byte[1024];
+                int read = 0;
+                while (read >= 0) {
+                    fout.write(buffer, 0, read);
+                    read = source.read(buffer);
+                } 
+                fout.flush();
+                fout.close();
+                source.close();
             }
-            fout.flush();
-            fout.close();
-            source.close();
         }
     }
 
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/MLHelper.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/MLHelper.java
index 719f8b2..dc14bf5 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/MLHelper.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/MLHelper.java
@@ -60,10 +60,11 @@ public class MLHelper
 
         if( dir_exact.isFile() )
         {
-            FileInputStream in = new FileInputStream(dir_exact);
-            props.load(in);
-            in.close();
-            loaded_something = true;
+            try (FileInputStream in = new FileInputStream(dir_exact)) {
+                props.load(in);
+                in.close();
+                loaded_something = true;
+            }
         }
 
         String resourcePath = root.getLanguageTranslationResourcePath();
@@ -154,15 +155,12 @@ public class MLHelper
 
             if( file.isFile() )
             {
-                try {
-                    FileInputStream in = new FileInputStream( file );
-                    if( in != null )
-                    {
+                try (FileInputStream in = new FileInputStream(file)) {
+                    if (in != null) {
                         missing_props.load(in);
                         in.close();
                     }
-                } catch( IOException ex ) {
-
+                } catch (IOException ex) {
                 }
             }
         }
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/MLUtil.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/MLUtil.java
index b91c52a..6d0ffbc 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/MLUtil.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/MLUtil.java
@@ -161,9 +161,10 @@ public class MLUtil {
 
         if( dir_exact.isFile() )
         {
-            FileInputStream in = new FileInputStream(dir_exact);
-            local_props.load(in);
-            in.close();
+            try (FileInputStream in = new FileInputStream(dir_exact)) {
+                local_props.load(in);
+                in.close();
+            }
 
         } else if( haveResource( resource_name ) ) {
 
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/TranslationDialog.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/TranslationDialog.java
index c61813e..ff16084 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/TranslationDialog.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/base/translation/TranslationDialog.java
@@ -10,6 +10,26 @@
  */
 
 package at.redeye.FrameWork.base.translation;
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import java.awt.Insets;
+import java.util.Locale;
+import java.util.Vector;
+import java.io.IOException;
+import java.awt.Rectangle;
+import static at.redeye.FrameWork.base.BaseDialog.logger;
+import javax.swing.JButton;
+import java.io.FileNotFoundException;
+import javax.swing.JTextField;
+import java.io.FileOutputStream;
+import java.util.Set;
+import java.io.File;
+import java.awt.Font;
+import java.util.TreeSet;
+import java.io.FileInputStream;
+import java.awt.Dimension;
+import java.util.Properties;
+import java.awt.Container;
 
 import at.redeye.FrameWork.base.AutoMBox;
 import at.redeye.FrameWork.base.BaseDialog;
@@ -687,9 +707,10 @@ public class TranslationDialog extends BaseDialog {
 
          if( file.isFile() )
          {
-            FileInputStream in = new FileInputStream(file);
-            props.load(in);
-            in.close();
+            try (FileInputStream in = new FileInputStream(file)) {
+                props.load(in);
+                in.close();
+            }
          }
 
          for(SimpleEntry<String,StringBuffer> p : data )
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/CopyFile.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/CopyFile.java
index 6c7072e..fe355cc 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/CopyFile.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/CopyFile.java
@@ -26,25 +26,15 @@ public class CopyFile
     {
         if( !from.exists() )
             return false;
-
-        try
-        {
-            FileInputStream fin = new FileInputStream( from );
-
-            FileOutputStream fout = new FileOutputStream(to);
-
-            byte[] buf =  new byte[1024*4];
-
+        try (FileOutputStream fout = new FileOutputStream(to)) {
+            byte[] buf = new byte[1024 * 4];
             for (int len; (len = fin.read(buf)) > 0;) {
                 fout.write(buf, 0, len);
             }
-
             fin.close();
             fout.close();
-
             return true;
-
-        } catch( IOException ex ) {
+        } catch (IOException ex) {
             logger.error(ex);
         }
 
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/DownloadUrl.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/DownloadUrl.java
index 4e601b8..31c03a9 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/DownloadUrl.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/DownloadUrl.java
@@ -4,6 +4,12 @@
  */
 
 package at.redeye.FrameWork.utilities;
+import java.io.IOException;
+import java.io.File;
+import java.io.InputStreamReader;
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.BufferedInputStream;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -36,83 +42,46 @@ public class DownloadUrl
     public boolean download()
     {
         File file = null;
-        OutputStream out = null;
-        BufferedInputStream bis = null;
         InputStream stream = null;
 
         boolean failed = true;
-
-        try
-        {
-            file = File.createTempFile( to.getName(), ".part" );
-
+        try (BufferedInputStream bis = new BufferedInputStream(stream)) {
+            file = File.createTempFile(to.getName(), ".part");
             stream = from.openStream();
-
-            out = new FileOutputStream(file);
-
-            bis = new BufferedInputStream( stream );
-
             byte[] buf = new byte[1024 * 4];
             int len;
-
             while ((len = bis.read(buf)) > 0) {
                 out.write(buf, 0, len);
-            }
+            } 
             out.close();
             bis.close();
-
             File old_one = to;
-
             boolean success = true;
-
-            if( old_one.exists() )
-            {
-              if( !old_one.delete() )
-              {
-                  logger.error("cannot delete file " + to.toString() );
-                  success = false;
-              }
+            if (old_one.exists()) {
+                if (!old_one.delete()) {
+                    logger.error("cannot delete file " + to.toString());
+                    success = false;
+                }
             }
-
-            if( success )
-            {
+            if (success) {
                 // umbenennen über verschiedene Verzeichnisse hinweg funktioniert anscheinend eh nie
-                /*
-                if( !file.renameTo(old_one) )
+                /* if( !file.renameTo(old_one) )
                 {
-                    logger.error("renaming from " + file.getAbsolutePath() + " to " + to + " failed!");
-                    logger.error("trying copying");
-                */
-                    if( !CopyFile.copy(file, old_one) )
-                    {
-                        logger.error("Cannot copy file");
-                        success = false;
-                    }
-
-                    file.delete();
-                //}
+                logger.error("renaming from " + file.getAbsolutePath() + " to " + to + " failed!");
+                logger.error("trying copying");
+                 */
+                if (!CopyFile.copy(file, old_one)) {
+                    logger.error("Cannot copy file");
+                    success = false;
+                }
+                file.delete();
+                // }
             }
-
-            if( success )
+            if (success)
                 failed = false;
 
-        } catch( IOException ex ) {
-
+        } catch (IOException ex) {
             logger.error(ex);
-
-        } finally {
-            try {
-                if( stream != null )
-                    stream.close();
-
-                if( out != null )
-                    out.close();
-
-                if( bis != null )
-                    bis.close();
-            } catch( IOException ex ) {
-                logger.error(ex);
-            }
         }
 
         return !failed;
@@ -155,7 +124,6 @@ public class DownloadUrl
    }
 
     public boolean download(StringBuffer buffer, String encoding) {
-        BufferedReader bis = null;
         InputStream stream = null;
 
         boolean failed = true;
@@ -165,7 +133,7 @@ public class DownloadUrl
 
             if( encoding != null )
             {
-                bis = new BufferedReader(new InputStreamReader(stream, encoding));
+                try (BufferedReader bis = new BufferedReader(new InputStreamReader(stream, encoding))) 
             }
             else
             {
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/MD5Calc.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/MD5Calc.java
index 72077c6..0d42d93 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/MD5Calc.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/MD5Calc.java
@@ -92,22 +92,18 @@ public class MD5Calc {
          * @return MD5 String Hex coded
          */
     public String calcCheckSum(File file) throws FileNotFoundException, IOException {
-
-        BufferedInputStream in = new BufferedInputStream(new FileInputStream(file));
-
-        byte[] buffer = new byte[2048];
-
-        int numRead;
-        do {
-            numRead = in.read(buffer);
-            if (numRead > 0) {
-                md5.update(buffer, 0, numRead);
-            }
-        } while (numRead != -1);
-
-        in.close();
-
-        return bytes2hex(md5.digest() ).toLowerCase();
+		try (BufferedInputStream in = new BufferedInputStream(new FileInputStream(file))) {
+			byte[] buffer = new byte[2048];
+			int numRead;
+			do {
+				numRead = in.read(buffer);
+				if (numRead > 0) {
+					md5.update(buffer, 0, numRead);
+				}
+			} while (numRead != -1 );
+			in.close();
+			return bytes2hex(md5.digest()).toLowerCase();
+		}
     }
 
 
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/ReadFile.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/ReadFile.java
index c447399..d1c3495 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/ReadFile.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/ReadFile.java
@@ -33,38 +33,27 @@ public static String read_file_string(String file_name)
 
     File file = new File(file_name);
     FileReader fis = null;
-    BufferedReader bis = null;
 
     StringBuilder res = new StringBuilder();
-
-    try {
-      fis = new FileReader(file);
-
-      // Here BufferedInputStream is added for fast reading.
-      bis = new BufferedReader(fis);
-
-      int len = 10;
-
-      char[] buff = new char[(int)Math.max(len,file.length())];
-
-      // dis.available() returns 0 if the file does not have more lines.
-      while (bis.ready()) {
-        len = bis.read(buff);
-
-        res.append(buff,0,len);
-        //System.out.println(dis.readLine());
-      }
-
-      // dispose all the resources after using them.
-      fis.close();
-      bis.close();
-
-    } catch (FileNotFoundException e) {
-      System.out.println("File Not Found: " + file_name);
-    } catch (IOException e) {
-      System.out.println(e);
-      // e.printStackTrace();
-    }
+        try (BufferedReader bis = new BufferedReader(fis)) {
+            fis = new FileReader(file);
+            int len = 10;
+            char[] buff = new char[((int) (Math.max(len, file.length())))];
+            // dis.available() returns 0 if the file does not have more lines.
+            while (bis.ready()) {
+                len = bis.read(buff);
+                res.append(buff, 0, len);
+                // System.out.println(dis.readLine());
+            } 
+            // dispose all the resources after using them.
+            fis.close();
+            bis.close();
+        } catch (FileNotFoundException e) {
+            System.out.println("File Not Found: " + file_name);
+        } catch (IOException e) {
+            System.out.println(e);
+            // e.printStackTrace();
+        }
 
     return res.toString();
   }
@@ -74,38 +63,27 @@ public static String read_file_string(String file_name)
 
     File file = new File(file_name);
     FileReader fis = null;
-    BufferedReader bis = null;
 
     StringBuilder res = new StringBuilder();
-
-    try {
-      fis = new FileReader(file);
-
-      // Here BufferedInputStream is added for fast reading.
-      bis = new BufferedReader(fis);
-
-      int len = 10;
-
-      char[] buff = new char[(int)Math.max(len,file.length())];
-
-      // dis.available() returns 0 if the file does not have more lines.
-      while (bis.ready()) {
-        len = bis.read(buff);
-
-        res.append(buff, 0, len);
-        //System.out.println(dis.readLine());
-      }
-
-      // dispose all the resources after using them.
-      fis.close();
-      bis.close();
-
-    } catch (FileNotFoundException e) {
-      System.out.println("File Not Found: " + file_name);
-    } catch (IOException e) {
-      System.out.println(e);
-      // e.printStackTrace();
-    }
+        try (BufferedReader bis = new BufferedReader(fis)) {
+            fis = new FileReader(file);
+            int len = 10;
+            char[] buff = new char[((int) (Math.max(len, file.length())))];
+            // dis.available() returns 0 if the file does not have more lines.
+            while (bis.ready()) {
+                len = bis.read(buff);
+                res.append(buff, 0, len);
+                // System.out.println(dis.readLine());
+            } 
+            // dispose all the resources after using them.
+            fis.close();
+            bis.close();
+        } catch (FileNotFoundException e) {
+            System.out.println("File Not Found: " + file_name);
+        } catch (IOException e) {
+            System.out.println(e);
+            // e.printStackTrace();
+        }
 
     return res;
   }
@@ -128,38 +106,32 @@ public static String read_file_string(String file_name)
 
       // Returns the contents of the file in a byte array.
     public static byte[] getBytesFromFile(File file) throws IOException {
-        InputStream is = new FileInputStream(file);
-
-        // Get the size of the file
-        long length = file.length();
-
-        // You cannot create an array using a long type.
-        // It needs to be an int type.
-        // Before converting to an int type, check
-        // to ensure that file is not larger than Integer.MAX_VALUE.
-        if (length > Integer.MAX_VALUE) {
-            // File is too large
-        }
-
-        // Create the byte array to hold the data
-        byte[] bytes = new byte[(int)length];
-
-        // Read in the bytes
-        int offset = 0;
-        int numRead = 0;
-        while (offset < bytes.length
-               && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
-            offset += numRead;
-        }
-
-        // Ensure all the bytes have been read in
-        if (offset < bytes.length) {
-            throw new IOException("Could not completely read file "+file.getName());
+        try (InputStream is = new FileInputStream(file)) {
+            // Get the size of the file
+            long length = file.length();
+            // You cannot create an array using a long type.
+            // It needs to be an int type.
+            // Before converting to an int type, check
+            // to ensure that file is not larger than Integer.MAX_VALUE.
+            if (length > Integer.MAX_VALUE) {
+                // File is too large
+            }
+            // Create the byte array to hold the data
+            byte[] bytes = new byte[((int) (length))];
+            // Read in the bytes
+            int offset = 0;
+            int numRead = 0;
+            while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
+                offset += numRead;
+            } 
+            // Ensure all the bytes have been read in
+            if (offset < bytes.length) {
+                throw new IOException("Could not completely read file " + file.getName());
+            }
+            // Close the input stream and return bytes
+            is.close();
+            return bytes;
         }
-
-        // Close the input stream and return bytes
-        is.close();
-        return bytes;
     }
 
     public static byte[] getBytesResource(Class loader, String resource) throws IOException {
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/zip/UnZip.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/zip/UnZip.java
index 64cf22a..dee0f03 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/zip/UnZip.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/zip/UnZip.java
@@ -61,14 +61,13 @@ public class UnZip
             byte[] buffer = new byte[BUFFER];
             int count;
             FileOutputStream fos = new FileOutputStream( file );
-            BufferedOutputStream dest = new BufferedOutputStream( fos, BUFFER );
-
-            while ((count = z.read(buffer, 0, BUFFER))
-              != -1) {
-               dest.write(buffer, 0, count);
+            try (BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)) {
+                while ((count = z.read(buffer, 0, BUFFER)) != -1) {
+                    dest.write(buffer, 0, count);
+                } 
+                dest.flush();
+                dest.close();
             }
-            dest.flush();
-            dest.close();
         }
     }
 
diff --git a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/zip/Zip.java b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/zip/Zip.java
index cbb7c82..c6a2d4e 100644
--- a/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/zip/Zip.java
+++ b/FrameWorkMinimized/src/main/java/at/redeye/FrameWork/utilities/zip/Zip.java
@@ -86,32 +86,25 @@ public class Zip
 
         byte[] readBuffer = new byte[4*1024];
         int bytesIn = 0;
-
-        FileInputStream in = new FileInputStream( file_or_dir );
-
-        String name = file_or_dir.getPath().substring(path.length());
-
-        if( name.startsWith("/") )
-            name = name.substring(1);
-
-        name.replace('/', '\\');
-
-        ZipEntry entry = new ZipEntry(name);
-
-        z.putNextEntry(entry);
-
-        while ((bytesIn = in.read(readBuffer)) != -1)
-        {
-            z.write(readBuffer, 0, bytesIn);
-
-            if( progress_container != null )
-                progress_container.incProgress(bytesIn, 0);
+        try (FileInputStream in = new FileInputStream(file_or_dir)) {
+            String name = file_or_dir.getPath().substring(path.length());
+            if (name.startsWith("/")) {
+                name = name.substring(1);
+            }
+            name.replace('/', '\\');
+            ZipEntry entry = new ZipEntry(name);
+            z.putNextEntry(entry);
+            while ((bytesIn = in.read(readBuffer)) != -1) {
+                z.write(readBuffer, 0, bytesIn);
+                if (progress_container != null) {
+                    progress_container.incProgress(bytesIn, 0);
+                }
+            } 
+            in.close();
+            if (progress_container != null) {
+                progress_container.incProgress(0, 1);
+            }
         }
-
-        in.close();
-
-        if( progress_container != null )
-            progress_container.incProgress(0, 1);
     }
 
     public static void main(String[] argv)
diff --git a/MSGViewer/src/main/java/net/sourceforge/MSGViewer/factory/mbox/MBoxWriterViaJavaMail.java b/MSGViewer/src/main/java/net/sourceforge/MSGViewer/factory/mbox/MBoxWriterViaJavaMail.java
index 37e02d7..fc758a5 100644
--- a/MSGViewer/src/main/java/net/sourceforge/MSGViewer/factory/mbox/MBoxWriterViaJavaMail.java
+++ b/MSGViewer/src/main/java/net/sourceforge/MSGViewer/factory/mbox/MBoxWriterViaJavaMail.java
@@ -223,17 +223,12 @@ public class MBoxWriterViaJavaMail implements AutoCloseable
      public static void main(String[] args)
      {
          ModuleLauncher.BaseConfigureLogging();
-
-         try {
-            Message msg = new MessageParser(new File( "/home/martin/NetBeansProjects/redeye/MSGViewer/test/data/Logminer.mbox")).parseMessage();
-
-            MBoxWriterViaJavaMail writer = new MBoxWriterViaJavaMail();
-
+        try (MBoxWriterViaJavaMail writer = new MBoxWriterViaJavaMail()) {
+            Message msg = new MessageParser(new File("/home/martin/NetBeansProjects/redeye/MSGViewer/test/data/Logminer.mbox")).parseMessage();
             writer.write(msg, new FileOutputStream("/home/martin/test_out.mbox"));
-
-         } catch( Exception ex ) {
-             ex.printStackTrace();
-         }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
      }
 
      public String getExtension()
