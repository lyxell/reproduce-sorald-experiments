diff --git a/protostuff-compiler/src/main/java/io/protostuff/compiler/CompilerUtil.java b/protostuff-compiler/src/main/java/io/protostuff/compiler/CompilerUtil.java
index ead33f48..467fc13a 100644
--- a/protostuff-compiler/src/main/java/io/protostuff/compiler/CompilerUtil.java
+++ b/protostuff-compiler/src/main/java/io/protostuff/compiler/CompilerUtil.java
@@ -45,8 +45,9 @@ public final class CompilerUtil
             packageDir.mkdirs();
 
         File outputFile = new File(packageDir, fileName);
-        FileOutputStream out = new FileOutputStream(outputFile);
-        return new BufferedWriter(new OutputStreamWriter(out, encoding));
+        try (FileOutputStream out = new FileOutputStream(outputFile)) {
+            return new BufferedWriter(new OutputStreamWriter(out, encoding));
+        }
     }
 
     public static List<File> getProtoFiles(File dir)
diff --git a/protostuff-compiler/src/main/java/io/protostuff/compiler/ProtoToProtoCompiler.java b/protostuff-compiler/src/main/java/io/protostuff/compiler/ProtoToProtoCompiler.java
index 1a071a1d..a8e85c29 100644
--- a/protostuff-compiler/src/main/java/io/protostuff/compiler/ProtoToProtoCompiler.java
+++ b/protostuff-compiler/src/main/java/io/protostuff/compiler/ProtoToProtoCompiler.java
@@ -58,52 +58,46 @@ public class ProtoToProtoCompiler extends STCodeGenerator
         Writer writer = CompilerUtil.newWriter(module, path, proto.getFile().getName());
         // Read proto file in a buffer
         StringBuilder builder = new StringBuilder();
-        BufferedReader reader = new BufferedReader(new FileReader(proto.getFile()));
-        String line = reader.readLine();
-        while (line != null)
-        {
-            builder.append(line);
-            builder.append(LINE_SEPARATOR);
-            line = reader.readLine();
-        }
-        reader.close();
-
-        String data = builder.toString();
-
-        for (Message message : proto.getMessages())
-        {
-            Annotation annotation = message.getAnnotation("Extend");
-            if (annotation != null)
-            {
-                Object byMessageRef = annotation.getValue("by");
-                if (byMessageRef == null)
-                    throw new IllegalArgumentException("By parameter of attribute @Extend is not specified");
-
-                if (!(byMessageRef instanceof Message))
-                    throw new IllegalArgumentException(
-                            "By parameter have a non Message reference in your @Extend annotation");
-
-                Message base = (Message) byMessageRef;
-                String result = extendBy(group, message, base);
-                if (result != null && result.length() > 0)
-                    data = injectAfterAnnotation(message, base, data, result);
-            }
-
-            Object extOpt = message.getExtraOption("extends");
-            if (extOpt != null)
-            {
-                if (!(extOpt instanceof Message))
-                    throw new IllegalArgumentException("Option extends specified not a message reference");
-
-                Message base = (Message) extOpt;
-                String result = extendBy(group, message, base);
-                if (result != null && result.length() > 0)
-                    data = injectAfterOption(message, base, data, result);
+        try (BufferedReader reader = new BufferedReader(new FileReader(proto.getFile()))) {
+            String line = reader.readLine();
+            while (line != null) {
+                builder.append(line);
+                builder.append(LINE_SEPARATOR);
+                line = reader.readLine();
+            } 
+            reader.close();
+            String data = builder.toString();
+            for (Message message : proto.getMessages()) {
+                Annotation annotation = message.getAnnotation("Extend");
+                if (annotation != null) {
+                    Object byMessageRef = annotation.getValue("by");
+                    if (byMessageRef == null) {
+                        throw new IllegalArgumentException("By parameter of attribute @Extend is not specified");
+                    }
+                    if (!(byMessageRef instanceof Message)) {
+                        throw new IllegalArgumentException("By parameter have a non Message reference in your @Extend annotation");
+                    }
+                    Message base = ((Message) (byMessageRef));
+                    String result = extendBy(group, message, base);
+                    if (result != null && result.length() > 0) {
+                        data = injectAfterAnnotation(message, base, data, result);
+                    }
+                }
+                Object extOpt = message.getExtraOption("extends");
+                if (extOpt != null) {
+                    if (!(extOpt instanceof Message)) {
+                        throw new IllegalArgumentException("Option extends specified not a message reference");
+                    }
+                    Message base = ((Message) (extOpt));
+                    String result = extendBy(group, message, base);
+                    if (result != null && result.length() > 0) {
+                        data = injectAfterOption(message, base, data, result);
+                    }
+                }
             }
+            writer.write(data);
+            writer.close();
         }
-
-        writer.write(data);
-        writer.close();
     }
 
     public static String extendBy(StringTemplateGroup group, Message extend, Message by) throws IOException
